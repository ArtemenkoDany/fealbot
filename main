from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import sqlite3

import asyncio
import aioschedule
import random

button1 = KeyboardButton('—Å—á–∞—Å—Ç—å–µ üòÄ')
button2 = KeyboardButton('–≥—Ä—É—Å—Ç—å üòî')
button3 = KeyboardButton('–∏—Å–ø—É–≥/—É–¥–∏–≤–ª–µ–Ω–∏–µ üò≥')
button4 = KeyboardButton('–≥–Ω–µ–≤/–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ üò°')

button5 = KeyboardButton("–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ")
button6 = KeyboardButton("–î–∞, –¥–∞–≤–∞–π")


markup1 = ReplyKeyboardMarkup(one_time_keyboard=True).add(button5).add(button6)
markup3 = ReplyKeyboardMarkup(one_time_keyboard=True).add(button1).add(button2).add(button3).add(button4)

TOKEN = '5204075373:AAFSSBvj_9mAg7wmBsVmVlu8RdQsrjofJew'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


class BotDB:
    def __init__(self, db_file):
        self.conn = sqlite3.connect(db_file)
        self.cursor = self.conn.cursor()

    def user_exists(self, user_id):
        result = self.cursor.execute("SELECT `id` FROM `users` WHERE `user_id` = ?", (user_id,))
        return bool(len(result.fetchall()))

    def get_user_id(self, user_id):
        result = self.cursor.execute("SELECT `id` FROM `users` WHERE `user_id` = ?", (user_id,))
        return result.fetchone()[0]

    def max_user_id(self):
        result = self.cursor.execute("SELECT max(`id`) FROM `users`")
        return result.fetchone()[0]

    def get_id(self):
        result = self.cursor.execute("SELECT `user_id` FROM `users` ORDER BY `id` ")
        return result.fetchall()

    def add_user(self, user_id, name):
        self.cursor.execute("INSERT INTO `users` (`user_id`, `name`, `feal1`, `feal2`,`feal3`,`feal4`) VALUES (?,?,?,?,?,?) ", (user_id, name, 0, 0 ,0 , 0,))
        return self.conn.commit()

    def add_user_feal1(self, user_id):
      self.cursor.execute("UPDATE `users` SET `feal1` = `feal1`+1 WHERE `user_id` = ?", (user_id,))
      return self.conn.commit()

    def add_user_feal2(self, user_id):
        self.cursor.execute("UPDATE `users` SET `feal2` = `feal2`+1 WHERE `user_id` = ?", (user_id,))
        return self.conn.commit()

    def add_user_feal3(self, user_id):
        self.cursor.execute("UPDATE `users` SET `feal3` = `feal3`+1 WHERE `user_id` = ?", (user_id,))
        return self.conn.commit()

    def add_user_feal4(self, user_id):
        self.cursor.execute("UPDATE `users` SET `feal4` = `feal4`+1 WHERE `user_id` = ?", (user_id,))
        return self.conn.commit()

    def feal_stat(self):
        result = self.cursor.execute("SELECT max(feal1, feal2, feal3, feal4) FROM users")
        return result.fetchall()

    def feal_array(self):
        result = self.cursor.execute("SELECT `feal1`, `feal2`,`feal3`,`feal4` FROM `users`")
        return result.fetchall()

    def feal_zero(self, user_id):
        self.cursor.execute("UPDATE `users` SET `feal1` = 0 , `feal2` = 0 ,`feal3` = 0, `feal4` = 0  WHERE `user_id` = ?", (user_id,))
        return self.conn.commit()

BotDB = BotDB("C:/Users/dan02/OneDrive/Desktop/botfeal.db")

user_id = BotDB.get_id()

ud= [x for t in user_id for x in t]

spisok= []
q = 0
w = 0

for c in BotDB.feal_array():
    q=q+1
    for z in BotDB.feal_stat():
        w=w+1
        if q==w:
            if z[0] == c[0]:
                spisok.append(f'–£—Ä–∞, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–ª–∞ —ç–º–æ—Ü–∏—è —Å—á–∞—Å—Ç—å—è! –ß–µ–º –±—ã–ª–∞ —Ü–µ–Ω–Ω–∞ –¥–ª—è —Ç–µ–±—è —ç—Ç–∞ –Ω–µ–¥–µ–ª—è?')
            elif z[0] == c[1]:
                spisok.append(f'–ü–æ—á–µ–º—É —Ç–∞–∫ –º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–∏—à—å? –ú–æ–∂–µ—Ç –µ—Å—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –º–æ–≥–ª–æ –±—ã —Ç–µ–±—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å?\n–£–ª—ã–±–Ω–∏—Å—å!')
            elif z[0] == c[2]:
                spisok.append(f"–ß—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ —É —Ç–µ–±—è —Ç—Ä–µ–≤–æ–≥—É –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, —á—Ç–æ–±—ã —Ç—Ä–µ–≤–æ–≥–∞ –≤—Å—ë —Ä–µ–∂–µ –ø–æ—è–≤–ª—è–ª–∞—Å—å –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏")
            elif z[0] == c[3]:
                spisok.append(f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø—ã—Ç—ã–≤–∞–ª —ç–º–æ—Ü–∏—é –∑–ª–æ—Å—Ç–∏, –º–æ–∂–µ—Ç –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, —á—Ç–æ–±—ã —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ —É—à–ª–æ?")
    q=q+BotDB.max_user_id()

spud = dict(zip(ud, spisok))

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id, message.from_user.first_name)

    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏.\n–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–µ–π—á–∞—Å:", reply_markup=markup3)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!", reply_markup=markup3)


@dp.message_handler(content_types=['text'], text="—Å—á–∞—Å—Ç—å–µ üòÄ")
async def handler(message: types.Message):
     await message.answer(f'{message.from_user.first_name}, —è –¥–æ–±–∞–≤–∏–ª —Ç–≤–æ—é —ç–º–æ—Ü–∏—é: —Å—á–∞—Å—Ç—å–µ üòÄ')
     if BotDB.get_user_id(message.from_user.id):
         BotDB.add_user_feal1(message.from_user.id)

@dp.message_handler(content_types=['text'], text="–≥—Ä—É—Å—Ç—å üòî")
async def handler(message: types.Message):
     await message.answer(f'{message.from_user.first_name}, —è –¥–æ–±–∞–≤–∏–ª —Ç–≤–æ—é —ç–º–æ—Ü–∏—é: –≥—Ä—É—Å—Ç—å üòî\n–•–æ—á—É —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –æ—â—É—â–∞—è –≥—Ä—É—Å—Ç—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∫–∏ –∂–∏–∑–Ω–∏!\n–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è, –≤ –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤ —Ç—ã –≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞–≤–ª—è–ª—Å—è')
     if BotDB.get_user_id(message.from_user.id):
         BotDB.add_user_feal2(message.from_user.id)
     await bot.send_message(message.from_user.id, "–ß—Ç–æ —Ç–µ–±—è —Ç–∞–∫ –æ–≥–æ—Ä—á–∏–ª–æ, –º–æ–∂–µ—Ç —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —á—Ç–æ –±—ã –ø–æ–¥–Ω—è—Ç—å —Å–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", reply_markup=markup1)

@dp.message_handler(content_types=['text'], text="–∏—Å–ø—É–≥/—É–¥–∏–≤–ª–µ–Ω–∏–µ üò≥")
async def handler(message: types.Message):
     await message.answer(f'{message.from_user.first_name}, —è –¥–æ–±–∞–≤–∏–ª —Ç–≤–æ—é —ç–º–æ—Ü–∏—é: –∏—Å–ø—É–≥/—É–¥–∏–≤–ª–µ–Ω–∏–µ üò≥\n–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, –ø–æ—á–µ–º—É —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ç—Ä–µ–≤–æ–≥—É?\n–ß—Ç–æ–±—ã –æ—Ç–≤–ª–µ—á—å—Å—è —Å–æ–≤–µ—Ç—É—é —Å–¥–µ–ª–∞—Ç—å 5 –≤–¥–æ—Ö–æ–≤-–≤—ã–¥–æ—Ö–æ–≤ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –Ω–∞ –Ω–∏—Ö.')
     if BotDB.get_user_id(message.from_user.id):
         BotDB.add_user_feal3(message.from_user.id)

@dp.message_handler(content_types=['text'], text="–≥–Ω–µ–≤/–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ üò°")
async def handler(message: types.Message):
     await message.answer(f'{message.from_user.first_name}, —è –¥–æ–±–∞–≤–∏–ª —Ç–≤–æ—é —ç–º–æ—Ü–∏—é: –≥–Ω–µ–≤/–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ üò°')
     if BotDB.get_user_id(message.from_user.id):
         BotDB.add_user_feal4(message.from_user.id)

@dp.message_handler(content_types=['text'], text="–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ")
async def handler(message: types.Message):
     await message.answer("–õ–∞–¥–Ω–æ, –Ω–æ —Ç—ã –≤—Å–µ –∂–µ –Ω–µ –≥—Ä—É—Å—Ç–∏)")

@dp.message_handler(content_types=['text'], text="–î–∞, –¥–∞–≤–∞–π")
async def handler(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://thiscatdoesnotexist.com")


async def noon_print():
    for z in range(len(BotDB.get_id())):
        await bot.send_message(BotDB.get_id()[z][0], "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö:", reply_markup=markup3)



async def stat_print():
    for z in range(len(BotDB.get_id())):
        await bot.send_message(BotDB.get_id()[z][0], spud[BotDB.get_id()[z][0]])
        BotDB.feal_zero(BotDB.get_id()[z][0])

x = random.randint(6, 10)
y = random.randint(11, 16)
z = random.randint(17, 22)
v = random.randint(11, 59)

async def scheduler():
    aioschedule.every().day.at(str(x)+":"+str(v)).do(noon_print)
    aioschedule.every().day.at(str(y)+":"+str(v)).do(noon_print)
    aioschedule.every().day.at(str(z)+":"+str(v)).do(noon_print)
    aioschedule.every().friday.at("12:00").do(stat_print)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)

